const { Telegraf, Markup } = require('telegraf')
const chrono = require('chrono-node')
const schedule = require('node-schedule')
require('@dotenvx/dotenvx').config()

const { saveReminders, loadReminders, logDebug } = require('./storage')

const bot = new Telegraf(process.env.BOT_TOKEN_PROD)

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É
let reminders = loadReminders()
let reminderId = reminders.length > 0 ? Math.max(...reminders.map(r => r.id)) + 1 : 1

// –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–∞–¥–∞—á—ñ –ø—ñ—Å–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç—É
reminders.forEach(r => {
  try {
    if (r.cron) {
      // –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
      r.job = schedule.scheduleJob(r.cron, () => {
        bot.telegram
          .sendMessage(r.chatId, `üîî –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${r.text}\nüë§ –í—ñ–¥: ${r.author}`)
          .catch(err => logDebug(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${r.id}: ${err.message}`))
      })
      logDebug(`–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${r.id} –∑ cron: ${r.cron}`)
    } else if (r.when) {
      const reminderDate = new Date(r.when)
      if (reminderDate > new Date()) {
        // –û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —è–∫–µ —â–µ –Ω–µ –Ω–∞—Å—Ç–∞–ª–æ
        r.job = schedule.scheduleJob(reminderDate, () => {
          bot.telegram
            .sendMessage(r.chatId, `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${r.text}\nüë§ –í—ñ–¥: ${r.author}`)
            .catch(err => logDebug(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${r.id}: ${err.message}`))

          // –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
          reminders = reminders.filter(x => x.id !== r.id)
          saveReminders(reminders)
        })
        logDebug(`–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${r.id} –Ω–∞ ${reminderDate.toLocaleString()}`)
      } else {
        logDebug(`–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${r.id} –≤–∂–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–µ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`)
      }
    }
  } catch (error) {
    logDebug(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${r.id}: ${error.message}`)
  }
})

// –û—á–∏—â—É—î–º–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
const activeReminders = reminders.filter(r => r.cron || (r.when && new Date(r.when) > new Date()))
if (activeReminders.length !== reminders.length) {
  reminders = activeReminders
  saveReminders(reminders)
  logDebug(`–û—á–∏—â–µ–Ω–æ ${reminders.length - activeReminders.length} –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å`)
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(ctx => {
  ctx.reply(`üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.

üìù –©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, –Ω–∞–ø–∏—à—ñ—Ç—å:
"–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è [—Ç–µ–∫—Å—Ç] [—á–∞—Å]"

‚è∞ –ü—Ä–∏–∫–ª–∞–¥–∏:
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫—É–ø–∏—Ç–∏ –º–æ–ª–æ–∫–æ –∑–∞–≤—Ç—Ä–∞ –æ 10:00"
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏"
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–∏ –ª—ñ–∫–∏ —â–æ–¥–Ω—è –æ 8:00"
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ 15 —á–∏—Å–ª–æ –∫—É–ø–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –æ 12:00"
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ 25 —á–∏—Å–ª–∞ –æ 10 —Ä–∞–Ω–∫—É"
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–µ–Ω –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –∑—É—Å—Ç—Ä—ñ—á –æ 9:30"

üîÑ –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:
‚Ä¢ –©–æ–¥–Ω—è: "—â–æ–¥–Ω—è –æ 8:00"
‚Ä¢ –©–æ—Ç–∏–∂–Ω—è: "–∫–æ–∂–µ–Ω –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –æ 10:00"  
‚Ä¢ –©–æ–º—ñ—Å—è—Ü—è: "–Ω–∞ 15 —á–∏—Å–ª–æ –æ 12:00", "–∫–æ–∂–Ω–æ–≥–æ 1 —á–∏—Å–ª–∞ –æ 9:00"

üìã –ö–æ–º–∞–Ω–¥–∏:
/list - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
/cancel [–Ω–æ–º–µ—Ä] - —Å–∫–∞—Å—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è`)
})

// –ö–æ–º–∞–Ω–¥–∞ /list –ø–æ–∫–∞–∑—É—î –∞–∫—Ç–∏–≤–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
bot.command('list', ctx => {
  const active = reminders
    .filter(r => r.chatId === ctx.chat.id)
    .filter(r => r.cron || (r.when && new Date(r.when) > new Date()))

  if (active.length === 0) {
    return ctx.reply('üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å')
  }

  ctx.reply(`üìã –ê–∫—Ç–∏–≤–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (${active.length}):`)

  active.forEach(r => {
    let msgDate
    if (r.cron) {
      // –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î–º–æ cron –¥–ª—è –∑—Ä–æ–∑—É–º—ñ–ª–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      const cronParts = r.cron.split(' ')
      const minute = cronParts[0]
      const hour = cronParts[1]
      const dayOfMonth = cronParts[2]
      const dayOfWeek = cronParts[4]

      if (dayOfMonth !== '*') {
        // –©–æ–º—ñ—Å—è—á–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        msgDate = `–©–æ–º—ñ—Å—è—Ü—è ${dayOfMonth} —á–∏—Å–ª–∞ –æ ${hour}:${minute.padStart(2, '0')}`
      } else if (dayOfWeek !== '*') {
        // –©–æ—Ç–∏–∂–Ω–µ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        const dayNames = ['–Ω–µ–¥—ñ–ª—é', '–ø–æ–Ω–µ–¥—ñ–ª–æ–∫', '–≤—ñ–≤—Ç–æ—Ä–æ–∫', '—Å–µ—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä', "–ø'—è—Ç–Ω–∏—Ü—é", '—Å—É–±–æ—Ç—É']
        const dayName = dayNames[parseInt(dayOfWeek)]
        msgDate = `–©–æ—Ç–∏–∂–Ω—è –≤ ${dayName} –æ ${hour}:${minute.padStart(2, '0')}`
      } else if (dayOfWeek === '*') {
        // –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        msgDate = `–©–æ–¥–Ω—è –æ ${hour}:${minute.padStart(2, '0')}`
      } else {
        msgDate = `–ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ (${r.cron})`
      }
    } else {
      msgDate = new Date(r.when).toLocaleString('uk-UA', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      })
    }

    ctx.reply(
      `#${r.id} üìå ${r.text}\nüïí ${msgDate}\nüë§ –í—ñ–¥: ${r.author}`,
      Markup.inlineKeyboard([Markup.button.callback(`‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ #${r.id}`, `cancel_${r.id}`)]),
    )
  })
})

// –ö–æ–º–∞–Ω–¥–∞ /cancel –≤—ñ–¥–º—ñ–Ω—è—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
bot.command('cancel', ctx => {
  const parts = ctx.message.text.split(' ')
  if (parts.length < 2) {
    return ctx.reply('‚ùå –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –ü—Ä–∏–∫–ª–∞–¥: /cancel 123')
  }

  const id = parseInt(parts[1])
  if (isNaN(id)) {
    return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è')
  }

  const index = reminders.findIndex(r => r.id === id && r.chatId === ctx.chat.id)
  if (index === -1) {
    logDebug(`/cancel: –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è chatId=${ctx.chat.id}`)
    return ctx.reply('‚ùå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ')
  }

  try {
    if (reminders[index].job) {
      reminders[index].job.cancel()
      logDebug(`/cancel: –°–∫–∞—Å–æ–≤–∞–Ω–æ job –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${id}`)
    }
    reminders.splice(index, 1)
    saveReminders(reminders)
    ctx.reply(`‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ`)
    logDebug(`/cancel: –í–∏–¥–∞–ª–µ–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${id} –¥–ª—è chatId=${ctx.chat.id}`)
  } catch (error) {
    logDebug(`–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${id}: ${error.message}`)
    ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è')
  }
})

// –î—ñ—è –ø–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—é –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', ctx => {
  const data = ctx.callbackQuery.data
  if (data.startsWith('cancel_')) {
    const id = parseInt(data.replace('cancel_', ''))
    const index = reminders.findIndex(r => r.id === id && r.chatId === ctx.chat.id)

    if (index !== -1) {
      try {
        if (reminders[index].job) {
          reminders[index].job.cancel()
        }
        reminders.splice(index, 1)
        saveReminders(reminders)
        ctx.editMessageText(`‚ùå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ`)
        ctx.answerCbQuery('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ')
        logDebug(`Callback: –í–∏–¥–∞–ª–µ–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${id}`)
      } catch (error) {
        logDebug(`–ü–æ–º–∏–ª–∫–∞ callback —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è #${id}: ${error.message}`)
        ctx.answerCbQuery('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è', { show_alert: true })
      }
    } else {
      ctx.answerCbQuery('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ', { show_alert: true })
    }
  }
})

// –ü–∞—Ä—Å–∏–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
bot.on('text', ctx => {
  const rxp = /–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è/gi
  const message = ctx.message.text.toLowerCase()

  // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è
  if (message.startsWith('/') || message.includes('@')) return

  if (rxp.test(message)) {
    try {
      let cron = null
      let when = null
      let dayOfWeek = null
      let dayOfMonth = null
      let hour = 12,
        minute = 0

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
      const isRepeating =
        /–∫–æ–∂(–µ–Ω|–Ω–æ–≥–æ|–Ω—É|–Ω—ñ–π|–∏–π|–∞|–µ|—ñ)|—â–æ–¥–Ω—è|—â–æ–ø–æ–Ω–µ–¥—ñ–ª|—â–æ–≤—ñ–≤—Ç–æ—Ä|—â–æ—Å–µ—Ä–µ–¥|—â–æ—á–µ—Ç–≤–µ—Ä|—â–æ–ø'—è—Ç–Ω|—â–æ—Å—É–±–æ—Ç|—â–æ–Ω–µ–¥—ñ–ª|—á–∏—Å–ª–æ|–º—ñ—Å—è—Ü—è/.test(
          message,
        )

      if (isRepeating) {
        // –®—É–∫–∞—î–º–æ —á–∞—Å —É —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        const timePatterns = [
          /\s[–æ–≤]\s?(\d{1,2})(?::(\d{2}))?\s*(?:–≥–æ–¥|–≥–æ–¥–∏–Ω)/i, // "–æ 10 –≥–æ–¥–∏–Ω—ñ"
          /\s[–æ–≤]\s?(\d{1,2})(?::(\d{2}))?/i, // "–æ 15:30"
          /\s[–æ–≤]\s?(\d{1,2}):(\d{2})/i, // "15:30"
          /\s[–æ–≤]\s?(\d{1,2})\s*–≥–æ–¥(?:–∏–Ω[—ñ—É–∞])?/i, // "10 –≥–æ–¥–∏–Ω—ñ", "15 –≥–æ–¥"
          /\s[–æ–≤]\s?(\d{1,2})\s*(?:–≥–æ–¥(?:–∏–Ω[—ñ—É–∞])?)??\s*—Ä–∞–Ω–∫—É/i, // "10 —Ä–∞–Ω–∫—É"
          /\s[–æ–≤]\s?(\d{1,2})\s*(?:–≥–æ–¥(?:–∏–Ω[—ñ—É–∞])?)??\s*–≤–µ—á–æ—Ä–∞/i, // "8 –≤–µ—á–æ—Ä–∞"
          /\s[–æ–≤]\s?(\d{1,2})\s*(?:–≥–æ–¥(?:–∏–Ω[—ñ—É–∞])?)??\s*–¥–Ω—è/i, // "2 –¥–Ω—è"
        ]

        let timeMatch = null
        for (const pattern of timePatterns) {
          timeMatch = message.match(pattern)
          if (timeMatch) break
        }

        if (timeMatch) {
          if (timeMatch[1]) {
            hour = parseInt(timeMatch[1])
            if (timeMatch[2]) {
              minute = parseInt(timeMatch[2])
            } else {
              minute = 0 // –Ø–∫—â–æ —Ö–≤–∏–ª–∏–Ω–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —Å—Ç–∞–≤–∏–º–æ 00
            }

            // –ö–æ—Ä–µ–∫—Ü—ñ—è —á–∞—Å—É –¥–ª—è "–≤–µ—á–æ—Ä–∞"
            if (message.includes('–≤–µ—á–æ—Ä–∞') && hour < 12) {
              hour += 12
            }
          }

          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —á–∞—Å—É
          if (hour < 0 || hour > 23 || minute < 0 || minute > 59) {
            return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≥–æ–¥–∏–Ω–∏ 0-23 —Ç–∞ —Ö–≤–∏–ª–∏–Ω–∏ 0-59')
          }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–æ —á–∏—Å–ª—É –º—ñ—Å—è—Ü—è
        const monthlyPatterns = [
          /–Ω–∞\s+(\d{1,2})\s+—á–∏—Å–ª–æ/i,
          /(\d{1,2})\s+—á–∏—Å–ª–æ\s+–∫–æ–∂/i,
          /–∫–æ–∂–µ–Ω\s+(\d{1,2})/i,
          /–∫–æ–∂–Ω–æ–≥–æ\s+(\d{1,2})/i,
          /—â–æ–º[—ñ–µ]—Å—è—Ü—è\s+(\d{1,2})/i,
          /(\d{1,2})\s+—á–∏—Å–ª–∞/i,
          /–∫–æ–∂–Ω–æ–≥–æ\s+(\d{1,2})\s+—á–∏—Å–ª–∞/i,
          /(\d{1,2})\s+—á–∏—Å–ª–∞\s+–º—ñ—Å—è—Ü—è/i,
          /(\d{1,2})\s+—á–∏—Å–ª–æ\s+–º—ñ—Å—è—Ü—è/i,
          /(\d{1,2})\s+—á–∏—Å–ª–∞\s+–∫–æ–∂–Ω–æ–≥–æ\s+–º—ñ—Å—è—Ü—è/i,
        ]

        for (const pattern of monthlyPatterns) {
          const match = message.match(pattern)
          if (match) {
            dayOfMonth = parseInt(match[1])
            if (dayOfMonth >= 1 && dayOfMonth <= 31) {
              break
            } else {
              return ctx.reply('‚ùå –î–µ–Ω—å –º—ñ—Å—è—Ü—è –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 31')
            }
          }
        }

        // –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–µ–Ω—å –º—ñ—Å—è—Ü—è, —Å—Ç–≤–æ—Ä—é—î–º–æ —â–æ–º—ñ—Å—è—á–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        if (dayOfMonth) {
          cron = `${minute} ${hour} ${dayOfMonth} * *`
          logDebug(`–°—Ç–≤–æ—Ä–µ–Ω–æ cron –¥–ª—è —â–æ–º—ñ—Å—è—á–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${cron}`)
        } else {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —â–æ—Ç–∏–∂–Ω–µ–≤—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
          const days = [
            { re: /–ø–æ–Ω–µ–¥—ñ–ª(–æ–∫|–∫–∞|–∫—É|–∫–æ–º|—Ü—ñ)|—â–æ–ø–æ–Ω–µ–¥—ñ–ª/i, cron: '1' },
            { re: /–≤—ñ–≤—Ç–æ—Ä(–æ–∫|–∫–∞|–∫—É|–∫–æ–º|—Ü—ñ)|—â–æ–≤—ñ–≤—Ç–æ—Ä/i, cron: '2' },
            { re: /—Å–µ—Ä–µ–¥(–∞|–∏|—É|–æ—é|—ñ)|—â–æ—Å–µ—Ä–µ–¥/i, cron: '3' },
            { re: /—á–µ—Ç–≤–µ—Ä(–≥|–≥–∞|–≥—É|–≥–æ–º|–∑—ñ)|—â–æ—á–µ—Ç–≤–µ—Ä/i, cron: '4' },
            { re: /–ø'—è—Ç–Ω–∏—Ü(—è|—ñ|—é|–µ—é|—è–º–∏)|—â–æ–ø'—è—Ç–Ω/i, cron: '5' },
            { re: /—Å—É–±–æ—Ç(–∞|–∏|—É|–æ—é|—ñ)|—â–æ—Å—É–±–æ—Ç/i, cron: '6' },
            { re: /–Ω–µ–¥—ñ–ª(—è|—ñ|—é|–µ—é|—è–º–∏)|—â–æ–Ω–µ–¥—ñ–ª/i, cron: '0' },
            { re: /—â–æ–¥–Ω—è|–∫–æ–∂–µ–Ω –¥–µ–Ω—å|–¥–Ω—è|–¥–µ–Ω—å/i, cron: '*' },
          ]

          for (const d of days) {
            if (d.re.test(message)) {
              dayOfWeek = d.cron
              break
            }
          }

          if (dayOfWeek !== null) {
            cron = `${minute} ${hour} * * ${dayOfWeek}`
            logDebug(`–°—Ç–≤–æ—Ä–µ–Ω–æ cron –¥–ª—è —â–æ—Ç–∏–∂–Ω–µ–≤–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${cron}`)
          }
        }
      }

      // –Ø–∫—â–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ, –ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ —Ä–∞–∑–æ–≤–µ
      if (!cron) {
        when = chrono.uk.parseDate(message)
        if (when && when <= new Date()) {
          return ctx.reply('‚ùå –ù–µ–º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ –º–∏–Ω—É–ª–∏–π —á–∞—Å')
        }
      }

      if (cron || when) {
        const taskText = ctx.message.text.replace(rxp, '').trim()
        if (!taskText) {
          return ctx.reply('‚ùå –û–ø–∏—à—ñ—Ç—å, –ø—Ä–æ —â–æ –Ω–∞–≥–∞–¥–∞—Ç–∏')
        }

        const chatId = ctx.chat.id
        const author = ctx.from.username
          ? '@' + ctx.from.username
          : `${ctx.from.first_name} ${ctx.from.last_name || ''}`.trim()

        let job
        let record

        if (cron) {
          // –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
          job = schedule.scheduleJob(cron, () => {
            bot.telegram
              .sendMessage(chatId, `üîî –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${taskText}\nüë§ –í—ñ–¥: ${author}`)
              .catch(err => logDebug(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${reminderId}: ${err.message}`))
          })

          record = {
            id: reminderId,
            chatId,
            text: taskText,
            cron,
            author,
            job,
            repeat: true,
          }

          reminders.push(record)
          saveReminders(reminders)
          // –°—Ç–≤–æ—Ä—é—î–º–æ –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É
          let scheduleDescription = ''
          const cronParts = cron.split(' ')

          if (cronParts[2] !== '*') {
            // –©–æ–º—ñ—Å—è—á–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            scheduleDescription = `—â–æ–º—ñ—Å—è—Ü—è ${cronParts[2]} —á–∏—Å–ª–∞ –æ ${hour.toString().padStart(2, '0')}:${minute
              .toString()
              .padStart(2, '0')}`
          } else if (cronParts[4] !== '*') {
            // –©–æ—Ç–∏–∂–Ω–µ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            const dayNames = ['–Ω–µ–¥—ñ–ª—é', '–ø–æ–Ω–µ–¥—ñ–ª–æ–∫', '–≤—ñ–≤—Ç–æ—Ä–æ–∫', '—Å–µ—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä', "–ø'—è—Ç–Ω–∏—Ü—é", '—Å—É–±–æ—Ç—É']
            const dayName = dayNames[parseInt(cronParts[4])]
            scheduleDescription = `—â–æ—Ç–∏–∂–Ω—è –≤ ${dayName} –æ ${hour.toString().padStart(2, '0')}:${minute
              .toString()
              .padStart(2, '0')}`
          } else if (cronParts[4] === '*') {
            // –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            scheduleDescription = `—â–æ–¥–Ω—è –æ ${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`
          }

          ctx.reply(`‚è≥ –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${reminderId} –∑–±–µ—Ä–µ–∂–µ–Ω–æ\nüìÖ –†–æ–∑–∫–ª–∞–¥: ${scheduleDescription}`)
          logDebug(`–°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${reminderId} –∑ cron: ${cron} (${scheduleDescription})`)
        } else if (when) {
          // –û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
          const currentReminderId = reminderId // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ callback

          job = schedule.scheduleJob(when, () => {
            bot.telegram
              .sendMessage(chatId, `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${taskText}\nüë§ –í—ñ–¥: ${author}`)
              .catch(err => logDebug(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${currentReminderId}: ${err.message}`))

            // –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            reminders = reminders.filter(r => r.id !== currentReminderId)
            saveReminders(reminders)
            logDebug(`–í–∏–∫–æ–Ω–∞–Ω–æ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${currentReminderId}`)
          })

          record = {
            id: reminderId,
            chatId,
            text: taskText,
            when: when.toISOString(),
            author,
            job,
            repeat: false,
          }

          reminders.push(record)
          saveReminders(reminders)
          ctx.reply(`‚è≥ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${reminderId} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ ${when.toLocaleString('uk-UA')}`)
          logDebug(`–°—Ç–≤–æ—Ä–µ–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è #${reminderId} –Ω–∞ ${when.toISOString()}`)
        }

        reminderId++
      } else {
        ctx.reply(`‚ùå –ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫—É–ø–∏—Ç–∏ –º–æ–ª–æ–∫–æ –∑–∞–≤—Ç—Ä–∞ –æ 10:00"
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É"
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —â–æ–¥–Ω—è –æ 8:00"
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ 15 —á–∏—Å–ª–æ –æ 12:00"
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ 25 —á–∏—Å–ª–∞ –æ 10 —Ä–∞–Ω–∫—É"
‚Ä¢ "–∑—Ä–æ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–µ–Ω –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –æ 9:30"`)
      }
    } catch (error) {
      logDebug(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${error.message}`)
      logDebug(`–ü–æ–≤–Ω–∏–π —Å—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏: ${error.stack}`)
      logDebug(`–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "${message}"`)
      ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
    }
  }
})

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
bot.catch((err, ctx) => {
  logDebug(`–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞: ${err.message}`)
  console.error('–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞:', err)
})

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('–û—Ç—Ä–∏–º–∞–Ω–æ SIGINT. Graceful shutdown...')
  logDebug('–û—Ç—Ä–∏–º–∞–Ω–æ SIGINT. –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...')
  bot.stop('SIGINT')
})

process.once('SIGTERM', () => {
  console.log('–û—Ç—Ä–∏–º–∞–Ω–æ SIGTERM. Graceful shutdown...')
  logDebug('–û—Ç—Ä–∏–º–∞–Ω–æ SIGTERM. –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...')
  bot.stop('SIGTERM')
})

bot
  .launch()
  .then(() => {
    logDebug('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!')
    console.log('ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!')
  })
  .catch(err => {
    logDebug(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: ${err.message}`)
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', err)
  })
